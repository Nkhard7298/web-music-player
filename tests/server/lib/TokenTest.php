<?php

require_once dirname(__FILE__).'/../../../server/lib/Token.php';

/**
 * Test class for Token.
 * Generated by PHPUnit on 2016-08-26 at 18:59:14.
 */
class TokenTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var Token
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Token();
    }

    /**
     * @covers Token::__construct
     */
    public function testConstruct()
    {
        $key = 'aze2';
        $this->object = new Token($key);
        $this->assertObjectHasAttribute('key', $this->object);
    }

    /**
     * @covers Token::encode
     */
    public function testEncode()
    {
        $this->object->payload = new stdClass();
        $this->object->encode();
        $this->assertNotEmpty($this->object->value);
        $this->assertRegExp('/^([a-zA-Z0-9\/\-_=+]+)\.([a-zA-Z0-9\/\-_=+]+)\.([a-zA-Z0-9\/\-_=+]+)$/', $this->object->value);
    }

    /**
     * @covers Token::decode
     */
    public function testDecode()
    {
        //set timestamp for checking expiration
        $exp = time() + 3600;
        $token = new Token();
        $token->payload = new stdClass();
        $token->payload->attributeOne = 'One';
        $token->payload->attributeTwo = 2;
        $token->encode(1);
        //simulate receiving of a token value to decode
        $this->object->value = $token->value;
        $this->assertTrue($this->object->decode(), 'Fail during token decode');
        $this->assertObjectHasAttribute('iss', $this->object->payload, 'Payload should contain an iss attribute');
        $this->assertEquals('wmp', $this->object->payload->iss, 'Payload should have an iss attribute set to wmp');
        $this->assertObjectHasAttribute('exp', $this->object->payload, 'Payload should contain an exp attribute');
        $this->assertGreaterThanOrEqual($exp, $this->object->payload->exp, 'Payload should have an exp attribute set to a future date');
        $this->assertLessThanOrEqual(time() + 3600, $this->object->payload->exp, 'Payload should have an exp attribute set to 1 hours later no more');
        unset($this->object->payload->iss, $this->object->payload->exp);
        $this->assertEquals($token->payload, $this->object->payload, 'Payload do not contain expected data');
    }

    /**
     * @covers Token::decode
     */
    public function testDecodeInvalidTokenFormat()
    {
        $this->object->value = 'invalidToken';
        $this->assertFalse($this->object->decode(), 'Token should not be decoded if format is invalid');
    }

    /**
     * @covers Token::decode
     */
    public function testDecodeInvalidHeaderFormat()
    {
        $this->object->value = 'header.payload.signature';
        $this->assertFalse($this->object->decode(), 'Token should not be decoded if header is invalid');
    }

    /**
     * @covers Token::decode
     */
    public function testDecodeInvalidSignatureFormat()
    {
        $header = array(
            'alg' => 'HS256',
            'typ' => 'JWT',
        );
        $b64Header = base64_encode(json_encode($header));
        $this->object->value = $b64Header.'.payload.signature';
        $this->assertFalse($this->object->decode(), 'Token should not be decoded if header is invalid');
    }

    /**
     * @covers Token::decode
     */
    public function testDecodeExpired()
    {
        //set timestamp for checking expiration
        $token = new Token();
        $token->payload = new stdClass();
        $token->encode(0);
        sleep(1);
        //simulate receiving of a token value to decode
        $this->object->value = $token->value;
        $this->assertFalse($this->object->decode(), 'Token should not be decoded if expired');
    }
}
